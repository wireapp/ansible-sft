---
# This is an example playbook to execute Ansible tests.

- name: Verify
  hosts: localhost
  tasks:
    - name: include molecule variables
      include_vars: shared_vars.yml

    # TODO: Make this return 200, 400 is good enough to verify that the request
    # is forwarded _somewhere_.
    - name: SFTD is accessible
      uri:
        url: "https://{{ sft_fqdn }}"
        timeout: 10
        validate_certs: "{{ not certbot_in_test_mode }}"
      register: response
      failed_when: response.status != 400

    - name: Temporary file for client private key
      tempfile:
      register: client_key
    - name: Download client private key
      aws_s3:
        bucket: "{{ sft_metrics_client_s3_bucket }}"
        object: "{{ sft_metrics_client_private_key_s3_path }}"
        dest: "{{ client_key.path }}"
        mode: get

    - name: Temporary file for client cert
      tempfile:
      register: client_cert
    - name: Download client cert
      aws_s3:
        bucket: "{{ sft_metrics_client_s3_bucket }}"
        object: "{{ sft_metrics_client_cert_s3_path }}"
        dest: "{{ client_cert.path }}"
        mode: get

    - name: SFT metrics are accessible
      uri:
        url: "https://{{ sft_fqdn }}:8443/metrics/sft"
        timeout: 10
        validate_certs: "{{ not certbot_in_test_mode }}"
        client_cert: "{{ client_cert.path }}"
        client_key: "{{ client_key.path }}"
      register: response
      failed_when: response.status != 200

    - name: Node exporter metrics are accessible
      uri:
        url: "https://{{ sft_fqdn }}:8443/metrics/node-exporter"
        timeout: 10
        validate_certs: "{{ not certbot_in_test_mode }}"
        client_cert: "{{ client_cert.path }}"
        client_key: "{{ client_key.path }}"
      register: response
      failed_when: response.status != 200

    - name: SFT metrics are not accessible without authentication
      uri:
        url: "https://{{ sft_fqdn }}:8443/metrics/sft"
        timeout: 10
        validate_certs: "{{ not certbot_in_test_mode }}"
      register: response
      failed_when: response.status != 400
