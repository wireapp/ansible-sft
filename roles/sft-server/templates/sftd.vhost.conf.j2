server {
    server_name {{ sft_fqdn }};

    listen 443 ssl http2;
    listen [::]:443 ssl http2;


    access_log  off;


    # NOTE: intermediate configuration, still TBD!
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    ssl_certificate_key {% if certbot_enabled %}{{ certbot_live_path }}/{{ sft_fqdn }}/privkey.pem{% else %}{{ tls_key_path }}{% endif %};
    ssl_certificate {% if certbot_enabled %}{{ certbot_live_path }}/{{ sft_fqdn }}/fullchain.pem{% else %}{{ tls_cert_path }}{% endif %};
    ssl_dhparam {{ nginx_dhparams_path }};

    ssl_session_timeout 1d;
    ssl_session_cache shared:le_nginx_SSL:1m;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;


    # HSTS (in seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;


    location / {
        proxy_pass http://127.0.0.1:{{ sftd_signaling_port }};

        # TODO: should this be open to any third party?
        add_header Access-Control-Allow-Origin '*' always;

        # NOTE: explicitly get rid of any cookie to prevent exposure to sftd
        proxy_set_header Cookie "";
    }


    # NOTE: don't expose metrics for now, until we have settled on how to authenticate collectors
    location /metrics {
        return 404;
    }
}
